/*
2020.12.26
啊哈算法队列的实现：
功能：输出解密的号码
*/

//#include<iostream>
//using namespace std;
//
//
//int main()
//{
//	int q[102] = { 6,3,1,7,5,8,9,2,4 }, head, tail;
//	//初始化队列
//	head = 0;
//	tail = 9;
//
//	//执行出队操作
//	while (head < tail)
//	{
//		//打印队首并将队首出队
//		cout << "队首为：" << q[head] << endl;
//		head++;
//
//		//将新的队首元素添加到队尾
//		q[tail] = q[head];
//		tail++;  //队尾向后移动
//		//再将队首元素出队
//		head++;
//	}
//
//	system("pause");
//
//	return 0;
//}


//使用结构体来操作队列
//#include<iostream>
//using namespace std;
//
//struct queue
//{
//	int data[100];  //定义结构体的数据‘
//	int head;
//	int tail;
//};
//
//int main()
//{
//	//实例化结构体类型
//	struct queue q;
//	q.head = 1;
//	q.tail = 1;
//	int i;
//	cout << "请输入九个数：" << endl;
//	for (i = 0; i < 9; i++)
//	{
//		cin >> q.data[q.tail];  //队列只能队尾添加元素
//		q.tail++;
//	}
//
//	//输出队列
//	while (q.head < q.tail)
//	{
//		cout << "队首元素为：" << q.data[q.head];  //输出队首元素
//		q.head++;
//
//		//将新的队首元素添加到队尾
//		q.data[q.tail] = q.data[q.head];
//		q.tail++;
//
//		//再将新的队首元素输出
//		q.head++;
//	}
//
//	system("pause");
//
//	return 0;
//}


/*
2020.12.26
栈的原理实现
功能：输出一个回文数

*/

//#include<iostream>
//using namespace std;
//int main()
//{
//	//定义两个字符数组存储
//	char a[100], s[100];
//	int i, len, mid, next, top;
//
//	cout << "请输入一串字符串：" << endl;
//	gets_s(a);
//
//	len = strlen(a);  //统计字符串的长度
//	mid = len / 2 - 1;
//
//	//栈初始化
//	top = 0;
//	//将前半部分的字符输入栈中
//	for (i = 0; i <= mid; i++)
//	{
//		top++;  //先对栈顶加加，再输入元素
//		s[top] = a[i];
//	}
//
//
//	//判断字符串长度是偶数还是奇数
//	if (len % 2 == 0)
//	{
//		next = mid + 1;  //偶数个数的字符，左右两边对称
//	}
//	else
//	{
//		next = mid + 2;  //奇数个数的字符，中间的那个不管，只管左右两边是否对称即可
//	}
//
//
//	//开始比较
//	for (i = next; i < len; i++)
//	{
//		if (a[i] != s[top])
//		{
//			break;
//		}
//		top--;
//	}
//
//
//	if (top == 0)
//	{
//		cout << "Yes" << endl;
//	}
//	else
//	{
//		cout << "No" << endl;
//	}
//
//	system("pause");
//
//	return 0;
//}


/*
2020.12.26
链表的原理：
功能：实现一个基本的单链表
*/

#include<iostream>
using namespace std;

//定义一个链表节点的结构体
//struct node
//{
//	int data;  //链表节点的数据域
//	struct node* next;  //链表节点的指针域
//};
//
//int main()
//{
//	struct node* head, * p, * q, * t;
//	int i, n, a;
//	cout << "请输入要输入的元素个数：" << endl;
//	cin >> n;
//
//	//初始化指针头部
//	head = NULL;  //指向空指针
//	cout << "请输入元素：" << endl;
//	for (i = 0; i < n; i++)
//	{
//		cin >> a;
//
//		//动态申请空间存放节点
//		p = (struct node*)malloc(sizeof(struct node));  //确定p的大小
//		p->data = a;  //指针的数据域
//		p->next = NULL;  //指针域指向空
//
//		if (head == NULL)
//		{
//			head = p;
//		}
//		else
//		{
//			q->next = p;
//		}
//		q = p;
//	}
//
//	//输出链表中的内容
//	t = head;
//	while (t != NULL)
//	{
//		cout << t->data << " ";
//		t = t->next;  //指向下一个位置继续遍历
//	}
//	cout << endl;
//
//	system("pause");
//
//	return 0;
//}


